

@model System.Collections.IEnumerable

@Html.DevExpress().GridView(settings => {
    settings.Name = "GridViewOrderItems";
    settings.KeyFieldName = "Id";
    settings.CallbackRouteValues = new { Controller = "Home", Action = "GridViewOrderItems", orderId = ViewData["orderId"] };
    settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Home", Action = "OrderItemsBatchUpdate", orderId = ViewData["orderId"] };

    settings.CommandColumn.Visible = true;
    settings.CommandColumn.ShowEditButton = true;
    settings.CommandColumn.ShowNewButton = true;
    settings.CommandColumn.ShowDeleteButton = true;
    settings.CommandColumn.Width = Unit.Percentage(20);
    settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;

    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;

    settings.Columns.Add(column => {
        column.FieldName = "ProductId";
        column.SortAscending();
        column.EditorProperties().ComboBox(combo => {
            combo.ValueField = "Id";
            combo.TextField = "Name";
            combo.ValueType = typeof(int);
            combo.BindList(T508133.Models.DataContext.Products);
            combo.ValidationSettings.Display = Display.Dynamic;
        });
    });

    settings.Columns.Add(column => {
        column.FieldName = "Quantity";
        (column.PropertiesEdit as TextBoxProperties).ValidationSettings.Display = Display.Dynamic;
    });

    settings.Width = Unit.Percentage(100);

    settings.ClientSideEvents.EndCallback = "orderItemsHandlers.endCallback";

}).SetEditErrorText((string)ViewData["EditError"]).Bind(Model).GetHtml()
